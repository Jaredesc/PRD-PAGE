// Variables principales
const video = document.getElementById('bgVideo');
const historyVideo = document.getElementById('historyVideo');
const backup = document.querySelector('.backup-background');
const loading = document.getElementById('loading');

// Variables para el men√∫ hamburger
const hamburger = document.getElementById('hamburger');
const navMenu = document.getElementById('navMenu');

// Inicializaci√≥n cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    initializeVideo();
    initializeHistoryVideo();
    initializeNavigation();
    initializeHamburgerMenu();
    console.log('üé¨ PRD Digital Zacatecas cargado');
});

// Inicializar video de fondo principal
function initializeVideo() {
    if (!video) {
        console.log('‚ùå Video principal no encontrado');
        return;
    }

    video.addEventListener('loadeddata', function() {
        console.log('‚úÖ Video de fondo principal cargado');
        video.style.display = 'block';
        backup.style.display = 'none';
        loading.style.display = 'none';
        
        // Forzar reproducci√≥n
        const playPromise = video.play();
        if (playPromise !== undefined) {
            playPromise.then(() => {
                console.log('‚úÖ Video principal reproduci√©ndose');
            }).catch(error => {
                console.log('‚ö†Ô∏è Autoplay fall√≥, necesita interacci√≥n:', error);
            });
        }
    });

    video.addEventListener('error', function(e) {
        console.log('‚ùå Error en video principal:', e);
        console.log('üñ±Ô∏è Usando fondo dorado de respaldo');
        loading.innerHTML = '‚ö†Ô∏è Usando fondo animado';
        setTimeout(() => loading.style.display = 'none', 2000);
    });

    // Asegurar que el video se mantenga en loop
    video.addEventListener('ended', function() {
        video.currentTime = 0;
        video.play();
    });

    // Forzar carga del video
    video.load();
}

// Inicializar video de fondo de la secci√≥n Historia
function initializeHistoryVideo() {
    if (!historyVideo) {
        console.log('‚ùå Video de historia no encontrado');
        return;
    }

    historyVideo.addEventListener('loadeddata', function() {
        console.log('‚úÖ Video de historia (nubes) cargado');
        
        // Forzar reproducci√≥n
        const playPromise = historyVideo.play();
        if (playPromise !== undefined) {
            playPromise.then(() => {
                console.log('‚úÖ Video de historia reproduci√©ndose');
            }).catch(error => {
                console.log('‚ö†Ô∏è Autoplay de historia fall√≥:', error);
            });
        }
    });

    historyVideo.addEventListener('error', function(e) {
        console.log('‚ùå Error en video de historia:', e);
        // Fallback: mantener el overlay con fondo oscuro
        const overlay = document.querySelector('.history-video-overlay');
        if (overlay) {
            overlay.style.background = 'rgba(51, 51, 51, 0.9)';
        }
    });

    // Asegurar que el video se mantenga en loop
    historyVideo.addEventListener('ended', function() {
        historyVideo.currentTime = 0;
        historyVideo.play();
    });

    // Desactivar completamente los controles
    historyVideo.controls = false;
    historyVideo.disablePictureInPicture = true;
    historyVideo.setAttribute('controlslist', 'nodownload nofullscreen noremoteplayback');
    
    // Prevenir click derecho en el video
    historyVideo.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        return false;
    });

    // Forzar carga del video
    historyVideo.load();
}

// Inicializar navegaci√≥n
function initializeNavigation() {
    // Smooth scroll para enlaces internos
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                
                // Cerrar men√∫ m√≥vil si est√° abierto
                if (navMenu && navMenu.classList.contains('active')) {
                    toggleHamburgerMenu();
                }
            }
        });
    });

    // Efecto de cambio de fondo del header al hacer scroll
    window.addEventListener('scroll', function() {
        const header = document.querySelector('.header');
        if (window.scrollY > 50) {
            header.style.background = 'rgba(0, 0, 0, 0.98)';
        } else {
            header.style.background = 'rgba(0, 0, 0, 0.85)';
        }
    });
}

// Inicializar men√∫ hamburger
function initializeHamburgerMenu() {
    console.log('üîç Buscando elementos del men√∫ hamburger...');
    console.log('Hamburger element:', hamburger);
    console.log('NavMenu element:', navMenu);

    if (hamburger && navMenu) {
        console.log('‚úÖ Elementos encontrados, configurando eventos...');
        
        // Clic en hamburger
        hamburger.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üñ±Ô∏è Click en hamburger detectado');
            toggleHamburgerMenu();
        });
        
        // Cerrar men√∫ al hacer clic en enlaces
        navMenu.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', function() {
                if (navMenu.classList.contains('active')) {
                    console.log('üîó Enlace clickeado, cerrando men√∫');
                    toggleHamburgerMenu();
                }
            });
        });
        
        // Cerrar men√∫ al hacer clic fuera
        document.addEventListener('click', function(e) {
            if (!hamburger.contains(e.target) && !navMenu.contains(e.target)) {
                if (navMenu.classList.contains('active')) {
                    console.log('üñ±Ô∏è Click fuera del men√∫, cerrando...');
                    toggleHamburgerMenu();
                }
            }
        });
        
        // Cerrar men√∫ al redimensionar ventana
        window.addEventListener('resize', function() {
            if (window.innerWidth > 768 && navMenu.classList.contains('active')) {
                console.log('üìè Ventana redimensionada, cerrando men√∫...');
                toggleHamburgerMenu();
            }
        });
        
        console.log('üçî Men√∫ hamburger inicializado correctamente');
    } else {
        console.error('‚ùå No se pudieron encontrar los elementos del men√∫ hamburger');
        console.log('Verificar que existan elementos con ID: hamburger y navMenu');
    }
}

// Toggle del men√∫ hamburger
function toggleHamburgerMenu() {
    console.log('üçî Toggle men√∫ hamburger activado');
    
    if (hamburger && navMenu) {
        // Toggle clases
        hamburger.classList.toggle('active');
        navMenu.classList.toggle('active');
        
        // Log para debug
        console.log('Hamburger active:', hamburger.classList.contains('active'));
        console.log('NavMenu active:', navMenu.classList.contains('active'));
        
        // Prevenir scroll del body cuando el men√∫ est√° abierto
        if (navMenu.classList.contains('active')) {
            document.body.style.overflow = 'hidden';
            console.log('üì± Men√∫ m√≥vil ABIERTO');
        } else {
            document.body.style.overflow = 'auto';
            console.log('üì± Men√∫ m√≥vil CERRADO');
        }
    } else {
        console.error('‚ùå Elementos hamburger o navMenu no encontrados en toggle');
    }
}

// Forzar reproducci√≥n de ambos videos con interacci√≥n del usuario
function forcePlayVideos() {
    // Video principal
    if (video && video.paused) {
        video.play().then(() => {
            console.log('‚úÖ Video principal iniciado por interacci√≥n del usuario');
        }).catch(e => {
            console.log('‚ùå No se pudo reproducir el video principal:', e);
        });
    }
    
    // Video de historia
    if (historyVideo && historyVideo.paused) {
        historyVideo.play().then(() => {
            console.log('‚úÖ Video de historia iniciado por interacci√≥n del usuario');
        }).catch(e => {
            console.log('‚ùå No se pudo reproducir el video de historia:', e);
        });
    }
}

// Event listeners para interacci√≥n del usuario
document.addEventListener('click', forcePlayVideos, { once: true });
document.addEventListener('touchstart', forcePlayVideos, { once: true });
document.addEventListener('keydown', forcePlayVideos, { once: true });

// Funciones para cuando agregues m√°s contenido
function showSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.scrollIntoView({ behavior: 'smooth' });
    }
}

// Funci√≥n para debug - puedes eliminarla despu√©s
function checkVideoStatus() {
    if (video) {
        console.log('üìπ Estado del video principal:');
        console.log('- Pausado:', video.paused);
        console.log('- Duraci√≥n:', video.duration);
        console.log('- Tiempo actual:', video.currentTime);
        console.log('- Volumen:', video.volume);
        console.log('- Muted:', video.muted);
    }
    
    if (historyVideo) {
        console.log('üå§Ô∏è Estado del video de historia:');
        console.log('- Pausado:', historyVideo.paused);
        console.log('- Duraci√≥n:', historyVideo.duration);
        console.log('- Tiempo actual:', historyVideo.currentTime);
        console.log('- Volumen:', historyVideo.volume);
        console.log('- Muted:', historyVideo.muted);
    }
}

// Funci√≥n para pausar/reproducir video de historia cuando sea visible
function handleHistoryVideoVisibility() {
    if (!historyVideo) return;
    
    const historySection = document.getElementById('historia');
    if (!historySection) return;
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // La secci√≥n est√° visible, reproducir video
                historyVideo.play().catch(e => {
                    console.log('No se pudo reproducir video de historia autom√°ticamente');
                });
            } else {
                // La secci√≥n no est√° visible, pausar video para ahorrar recursos
                historyVideo.pause();
            }
        });
    }, {
        threshold: 0.1 // Activar cuando al menos 10% de la secci√≥n est√© visible
    });
    
    observer.observe(historySection);
}

// Inicializar observador de visibilidad cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    // Esperar un poco para que todos los elementos est√©n listos
    setTimeout(handleHistoryVideoVisibility, 1000);
});

// Exponer funciones √∫tiles globalmente
window.PRD = {
    showSection,
    checkVideoStatus,
    forcePlayVideos,
    toggleHamburgerMenu
};